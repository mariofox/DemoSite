# ######################################## #
# OVERVIEW - How the properties files work #
# ######################################## #
# When the application starts up, Broadleaf provides a mechanism to merge and override properties files based
# on the current environment that is being used. Broadleaf will look in the classpath for the following files,
# in order, to merge (later files override earlier files if two properties collide):
#
# common-shared.properties (in the core project)
# [specific-environment]-shared.properties (in the core project)
# common.properties (in either site or admin project, depending on which app is starting)
# [specific-environment].properties (in either site or admin project, depending on which app is starting)
# -Dproperty-override-shared specified value, if any
# -Dproperty-override specified value, if any

# ############################################# #
# EMAILS - Settings for system generated emails #
# ############################################# #

#customerService.fromAddress="customerservice@heatclinic.com";

# Forgot Password Email
#customerForgotPasswordEmail.emailTemplate=/emailTemplates/forgotPassword.html
#customerForgotPasswordEmail.subject=Forgot Password Request - Heat Clinic

# ####################################### #
# ANALYTICS - Google Analytics Properties #
# ####################################### #
# Override to set your googleAnalytics Id.
# Sites may want to setup IDs for QA and production
#googleAnalytics.webPropertyId=UA-XXXXXXX-X

#Used in _addTrans to specify the site that the transaction is for. Could be used in a multi-site scenario
#where multiple sites feed into the same Google Analytics account and you want to keep track of where the
#transactions actually come from
#googleAnalytics.affiliation=

# ############################################ #
# CONTENT MANAGEMENT - Asset Server Properties #
# ############################################ #

# controls whether or not the AssetService stores (and retrieves) the 
# binary asset from the filesystem or database
asset.use.filesystem.storage=true
    
# Allows us to load demo images from the classpath.   This would be an expensive approach
# for most implementations and should only be done in dev.   Images should be on a 
# shared file system or the DB when in non-development environments
asset.server.file.classpath.directory=

# Because we are blanking the value out here, broadleaf will use System.setProperty("java.io.tmpdir")
# This would NOT make sense in non-development environments since the OS may delete files in that
# directory.
# 
# In non-development environments, this defaults to "/broadleaf/assets".
asset.server.file.system.path=/u01/escritura/Suramarketplace

bundle.enabled=false
minify.enabled=false

# If left blank, the system will use the non secure url and replace the http with
# https.
#asset.server.url.prefix.secure=

# prefix in front of all urls that hit your storefront from the admin. This is useful
# when the storefront is located on a different server from the admin (e.g. http://storefront:8080/)
#store.front.webapp.prefix=http://segdllo02.suranet.com/suramarketplace/

# ##################################### #
# DATABASE - Database Server Properties #
# ##################################### #

# Settings for the default persistence unit
blPU.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect
# Settings for the CMS storage persistence unit
blCMSStorage.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect
# Settings for the secure persistence unit
blSecurePU.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect

auto.correct.sequence.generator.inconsistencies=true

# ##################################### #
# Thymeleaf View Resolver               #
# ##################################### #

thymeleaf.view.resolver.cache=true